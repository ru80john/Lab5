#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void dfs(vector< vector<int> > &adj, vector<bool> &vis, int i)
{
      vis[i] = true;
      for (auto n : adj[i]) {
            if (!vis[n]) {
                dfs(adj, vis, n);
            }
      }
}

void bfs(vector< vector<int> > &adj, vector<bool> &vis, int i)
{
    queue<int> Q;
    Q.push(i);
    while(!Q.empty()) {
        int tmp = Q.front();
        Q.pop();
        if (vis[tmp]) continue;
        vis[tmp] = true;
        for (auto n : adj[tmp]) {
            if(!vis[n]) Q.push(n);
        }
        
    }
}
int main()
{
    int t,n,m;
    cin >> t;
    while (t--) {
        cin >> n >> m;
        vector< vector<int> > adj(n + 1);
        vector<bool> vis(n + 1, false);
        while (m--) {
            int u,v;
            cin >> u >> v;
            adj[u].emplace_back(v);
            adj[v].emplace_back(u);
        }
        int ans = 0;
        for (int i = 1; i < n; ++i) {
            if (!vis[i]) {
                ans++;
                bfs(adj, vis, i);
            }
        }
        cout << ans << endl;
    }
    return 0;
}
